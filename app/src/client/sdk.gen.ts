// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteUserByUserIdCatByCatIdData, DeleteUserByUserIdCatByCatIdEntityData, DeleteUserByUserIdCatByCatIdEntityResponses, DeleteUserByUserIdCatByCatIdEventData, DeleteUserByUserIdCatByCatIdEventResponses, DeleteUserByUserIdCatByCatIdResponses, DeleteUserByUserIdData, DeleteUserByUserIdResponses, GetUserByUserIdCatByCatIdData, GetUserByUserIdCatByCatIdDocumentByDocumentIdData, GetUserByUserIdCatByCatIdDocumentByDocumentIdErrors, GetUserByUserIdCatByCatIdDocumentByDocumentIdResponses, GetUserByUserIdCatByCatIdDocumentData, GetUserByUserIdCatByCatIdDocumentResponses, GetUserByUserIdCatByCatIdEntityByEntityIdData, GetUserByUserIdCatByCatIdEntityByEntityIdErrors, GetUserByUserIdCatByCatIdEntityByEntityIdResponses, GetUserByUserIdCatByCatIdEntityData, GetUserByUserIdCatByCatIdEntityResponses, GetUserByUserIdCatByCatIdErrors, GetUserByUserIdCatByCatIdEventData, GetUserByUserIdCatByCatIdEventResponses, GetUserByUserIdCatByCatIdLocationData, GetUserByUserIdCatByCatIdLocationResponses, GetUserByUserIdCatByCatIdResponses, GetUserByUserIdCatData, GetUserByUserIdCatResponses, GetUserByUserIdData, GetUserByUserIdErrors, GetUserByUserIdResponses, GetUserData, GetUserResponses, PostUserByUserIdCatByCatIdDocumentData, PostUserByUserIdCatByCatIdDocumentResponses, PostUserByUserIdCatByCatIdEntityData, PostUserByUserIdCatByCatIdEntityResponses, PostUserByUserIdCatByCatIdEventByEventIdEntityData, PostUserByUserIdCatByCatIdEventByEventIdEntityResponses, PostUserByUserIdCatByCatIdEventData, PostUserByUserIdCatByCatIdEventResponses, PostUserByUserIdCatData, PostUserByUserIdCatResponses, PostUserData, PostUserResponses, PutUserByUserIdCatByCatIdData, PutUserByUserIdCatByCatIdResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get all users
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponses, unknown, ThrowOnError>({
        url: '/user',
        ...options
    });
};

/**
 * Create a new user
 */
export const postUser = <ThrowOnError extends boolean = false>(options: Options<PostUserData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserResponses, unknown, ThrowOnError>({
        url: '/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a user
 */
export const deleteUserByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserByUserIdResponses, unknown, ThrowOnError>({
        url: '/user/{userId}',
        ...options
    });
};

/**
 * Get a specific user
 */
export const getUserByUserId = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdResponses, GetUserByUserIdErrors, ThrowOnError>({
        url: '/user/{userId}',
        ...options
    });
};

/**
 * Get all cats (timelines)
 */
export const getUserByUserIdCat = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat',
        ...options
    });
};

/**
 * Create a new cat (timeline)
 */
export const postUserByUserIdCat = <ThrowOnError extends boolean = false>(options: Options<PostUserByUserIdCatData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserByUserIdCatResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a cat (timeline)
 */
export const deleteUserByUserIdCatByCatId = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByUserIdCatByCatIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserByUserIdCatByCatIdResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}',
        ...options
    });
};

/**
 * Get a specific cat (timeline)
 */
export const getUserByUserIdCatByCatId = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdResponses, GetUserByUserIdCatByCatIdErrors, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}',
        ...options
    });
};

/**
 * Update a cat (timeline)
 */
export const putUserByUserIdCatByCatId = <ThrowOnError extends boolean = false>(options: Options<PutUserByUserIdCatByCatIdData, ThrowOnError>) => {
    return (options.client ?? client).put<PutUserByUserIdCatByCatIdResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all documents for a cat (timeline)
 */
export const getUserByUserIdCatByCatIdDocument = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdDocumentData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdDocumentResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/document',
        ...options
    });
};

/**
 * Upload a document for a cat (timeline)
 */
export const postUserByUserIdCatByCatIdDocument = <ThrowOnError extends boolean = false>(options: Options<PostUserByUserIdCatByCatIdDocumentData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserByUserIdCatByCatIdDocumentResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/user/{userId}/cat/{catId}/document',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get a specific document
 */
export const getUserByUserIdCatByCatIdDocumentByDocumentId = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdDocumentByDocumentIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdDocumentByDocumentIdResponses, GetUserByUserIdCatByCatIdDocumentByDocumentIdErrors, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/document/{documentId}',
        ...options
    });
};

/**
 * Delete a cat's event
 */
export const deleteUserByUserIdCatByCatIdEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByUserIdCatByCatIdEventData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserByUserIdCatByCatIdEventResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/event',
        ...options
    });
};

/**
 * Get all events for a cat (timeline)
 */
export const getUserByUserIdCatByCatIdEvent = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdEventData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdEventResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/event',
        ...options
    });
};

/**
 * Associate an existing event with a cat (timeline)
 */
export const postUserByUserIdCatByCatIdEvent = <ThrowOnError extends boolean = false>(options: Options<PostUserByUserIdCatByCatIdEventData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserByUserIdCatByCatIdEventResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/event',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a cat's entity
 */
export const deleteUserByUserIdCatByCatIdEntity = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByUserIdCatByCatIdEntityData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteUserByUserIdCatByCatIdEntityResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/entity',
        ...options
    });
};

/**
 * Get all entities for a cat (timeline)
 */
export const getUserByUserIdCatByCatIdEntity = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdEntityData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdEntityResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/entity',
        ...options
    });
};

/**
 * Create an entity (person/animal) who participates in events
 */
export const postUserByUserIdCatByCatIdEntity = <ThrowOnError extends boolean = false>(options: Options<PostUserByUserIdCatByCatIdEntityData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserByUserIdCatByCatIdEntityResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/entity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a specific entity
 */
export const getUserByUserIdCatByCatIdEntityByEntityId = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdEntityByEntityIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdEntityByEntityIdResponses, GetUserByUserIdCatByCatIdEntityByEntityIdErrors, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/entity/{entityId}',
        ...options
    });
};

/**
 * Add an entity to an event (PARTICIPATES_IN)
 */
export const postUserByUserIdCatByCatIdEventByEventIdEntity = <ThrowOnError extends boolean = false>(options: Options<PostUserByUserIdCatByCatIdEventByEventIdEntityData, ThrowOnError>) => {
    return (options.client ?? client).post<PostUserByUserIdCatByCatIdEventByEventIdEntityResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/event/{eventId}/entity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all locations for a cat (timeline)
 */
export const getUserByUserIdCatByCatIdLocation = <ThrowOnError extends boolean = false>(options: Options<GetUserByUserIdCatByCatIdLocationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetUserByUserIdCatByCatIdLocationResponses, unknown, ThrowOnError>({
        url: '/user/{userId}/cat/{catId}/location',
        ...options
    });
};
